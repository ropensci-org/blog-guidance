[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rOpenSci Blog Guide for Authors and Editors",
    "section": "",
    "text": "Preface\nThe purpose of this documentation is to provide a guide for authors and editors of blog posts and tech notes for the rOpenSci website. We created it after reviewing and publishing over 100 posts by community members, in hopes of addressing many frequently asked questions, and frequently given suggestions.\nThe volume of information may be overwhelming at first. Some of the guidance indicates things we require that you do (such as creating an author file with your metadata), while most of the guidance is information to help you (such as how to add an image to your post).\nWhat’s in the book and what’s required reading?\n\nChapter 1 Content Guidelines coaches you in thinking through what you might say in your post.\nChapter 2 Technical Guidelines is required reading for submitting a post - from drafting in an (R) Markdown template to submitting for review using GitHub pull request infrastructure.\nChapter 3 Responding to Editor’s Review is required reading, briefly outlining how to find and respond to an editor’s comments in the GitHub pull request review interface.\nChapter 4 Publication and Promotion provides some motivation for doing the extra work to contribute a post by outlining what rOpenSci does to promote it.\nChapters 5 and 6 provide guidelines for editors reviewing, publishing and promoting posts and outine editorial governance.\n\nIf you find any errors or things that need clarification, we would be grateful if you opened an issue or pull request in the repository for this book.\nWe are thankful for the feedback and contributions from Hugo Gruson, Mark Padgham, and Diego Hernangómez.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>rOpenSci Blog Guide for Authors and Editors</span>"
    ]
  },
  {
    "objectID": "authorcontent.html",
    "href": "authorcontent.html",
    "title": "2  Content Guidelines",
    "section": "",
    "text": "2.1 Blog post or tech note?\nThe rOpenSci blog features two types of posts: long form blog posts for a broad readership, and shorter tech notes aimed at a more technical audience. The word “post” refers generically to either type. We provide details and selected examples of blog posts and tech notes below. Tech notes are written for a narrower audience that wants details. They may include information on a software release with major new features, breaking changes, or significant new documentation. They should provide something a reader could not glean from the documentation itself.\nBlog posts are usually published weekly on Tuesdays. Tech notes can be published on any weekday. Both are given the same promotional treatment by rOpenSci.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Content Guidelines</span>"
    ]
  },
  {
    "objectID": "authorcontent.html#postthemes",
    "href": "authorcontent.html#postthemes",
    "title": "2  Content Guidelines",
    "section": "\n2.2 Themes",
    "text": "2.2 Themes\nRead a few posts and consider what you like (or not) about them. Many posts written by community members are about packages that have passed rOpenSci software peer review, however, we have posts on a range of topics and we encourage you to consider these or to propose others.\nExpand a topic below to see examples.\n\n\n Useful how-tos and examples \n\n\nHow to cite R and R packages addresses a problem important to rOpenSci’s mission\n\n\nHow to precompute package vignettes or pkgdown articles addresses a tricky problem common to many developers\n\n\nHow I Test cffr on (about) 2,000 Packages using GitHub Actions and R-universe shares how the author fixed a tricky problem using an rOpenSci project\n\n\n\n\n About a group of packages used in a research domain \n\n\nUsing Open-Access Tools (rentrez, taxize) to Find Coronaviruses, Their Genetic Sequences, and Their Hosts Together, the packages rentrez and taxize can extract standardised data on viruses and their hosts from genetic records.\n\n\n\n\n Describing a creative use case for multiple rOpenSci packages \n\n\nWhere to go observe birds in Radolfzell? An answer with R and open data\n\n\n\n\n Reviewer perspectives \n\n\nposts tagged reviewer\n\n\n\n\n Contributing to or taking over maintenance of a package \n\n\nRelaunching the qualtRics package has an engaging tone while being informative and providing technical details.\n\n\nMonkeying around with Code and Paying it Forward gives insight into how the author is thinking about workflows and contributing to rOpenSci.\n\n\n\n\n Summarizing a Community Call \n\n\nCode Review in the Lab\n\n\n\n\n Using an rOpenSci resource, such as the Dev Guide or a task view \n\n\nWhen Standards Go Wild - Software Review for a Manuscript\n\n\nUsing rOpenSci Software Peer Review Guidelines for Teaching\n\n\nGetting your toes wet in R: Hydrology, meteorology, and more\n\n\n\n\n About a peer-reviewed package developed by the authors \n\n\nrmangal: Making Ecological Networks Easily Accessible talks through the scientific problem and context, shows some code examples, and talks about peer review but doesn’t make that the dominant part of the post.\n\n\nForcing Yourself to Make Your Life Easier is an honest post with some reflection and an important message.\n\n\nThe av Package: Production Quality Video in R (tech note) is to the point. av is not a peer-reviewed package but this is a good example of a tech note.\n\n\n\n\n Major updates to packages with broad audiences \n\n\n(Re)introducing skimr v2 - A year in the life of an open source R project)\n\n\ndrake transformed (technote)\n\n\ndrake’s improved high-performance computing power (technote)\n\n\n\n\n Describe an unsolved problem and a call to action \n\n\nrOpenSci Educators Collaborative: What Are The Challenges When Teaching Science With R? (3 posts from unconf18)",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Content Guidelines</span>"
    ]
  },
  {
    "objectID": "authorcontent.html#postcontent",
    "href": "authorcontent.html#postcontent",
    "title": "2  Content Guidelines",
    "section": "\n2.3 Post content",
    "text": "2.3 Post content\nSince most posts contributed by community members are about packages that have passed software peer review, we use this type of post as an example to outline components you should consider including in your post. Some components would not be included if the post is not about a peer reviewed package.\n\n2.3.1 What message would you like a reader to take away?\nWhat do you feel like you can’t resist sharing with (a very small corner of) the world?\nWhy did you create the package? Discuss the tools it builds upon or how it works under the hood. You might share your opinions, 5 tips on doing X, what was challenging and how did you meet the challenge, what got you excited or inspired you, something you learned or implemented from the software peer review process, or a compelling real-world example.\nShare something a reader could not glean from the package documentation itself.\nUse your own voice when you’re writing this. Our website has a professional tone but is less formal than, for example, an academic journal.\n\n2.3.2 Who is your audience?\nYou can’t write for everyone; you should have an audience in mind. Consider that readers of the rOpenSci blog have a broad range of interests, skills, and experiences. Some will have deep technical knowledge in software development. Some will be domain scientists interested in how to use the package you have developed. Some might be reading as a way to consider how they can contribute to an open source project. Write in a way that any reader can understand what your post is about, but target the majority of its content to a specific audience.\n\n2.3.3 Start with a short summary\nAssume no one knows what your package does or why they should care about it. Provide an outline so your reader knows where you’re taking them, especially if your post is long or complex. A good introduction helps potential readers know whether they want to read the rest. Use short headings to guide the reader.\n\n2.3.4 Give a compelling example\n\nExplain what you’re going to do in plain language\nInclude some code and a figure or other image\nBefore code snippets, explain what they do\nAfter a figure generated by your code, explain what conclusion can be drawn from it. Don’t leave the reader to guess your intent.\n\n2.3.5 Be generous with your appreciation\nDid others who are not authors of the post make significant contributions to the package or its inspiration?\nThank reviewers using their first and last names linked to their rOpenSci author page if they have one, or to their relevant online presence (e.g. website, social media, GitHub) and link to the software review thread. There is no obligation to do this, but you could note something specific that you improved in your package or in your coding or documentation practice as a direct result of reviewers’ comments.\n\n2.3.6 Consider including a call to action\nDo you talk about future plans for package development? Consider opening issues to illustrate your thinking. If you’re willing to consider code or documentation contributions from others, label those issues “help wanted” (no hyphen, no emojis) and “good first issue” or “beginner” if those apply. People who want to contribute to rOpenSci can find these by searching GitHub (example: org:ropensci label:“help wanted” state:open), and we occasionally feature these in our newsletter.\nIf you want people to tell you how they have used your package, tell them how you want them to do that. Encourage them to submit their use case to our public forum. There’s a template to help. We share these on social media to help others see applications and we tag both the package author and use case submitter to give credit. For longer form use cases, they could submit a vignette to include as an article in your package documentation (example).\nIf you want people to give you general feedback, tell them how you’d like to receive that.\n\n2.3.7 Conclusion or summary\nWill readers understand your take-home message clearly enough to share on their social media about your post? You might need to remind them of your main points.\nNow review the Technical Guidelines for submitting your draft post, and you’re ready to go.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Content Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html",
    "href": "authortechnical.html",
    "title": "3  Technical Guidelines",
    "section": "",
    "text": "3.1 Fork the roweb3 repository\nBriefly, the process is:\nThis chapter links to templates for posts and checklists that you can also find in the Appendix.\nFork the rOpenSci website repository and create a new branch to work on your post. For help with this aspect of git/GitHub, we recommend happygitwithr and the pull request helpers of the usethis package.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#install-blogdown",
    "href": "authortechnical.html#install-blogdown",
    "title": "3  Technical Guidelines",
    "section": "\n3.2 Install blogdown",
    "text": "3.2 Install blogdown\nIf you plan to use R Markdown to write your post (using index.Rmd as opposed to directly writing it in Markdown with index.md and not executing any code), please install or update blogdown.\ninstall.packages(\"blogdown\")",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#createauthorfile",
    "href": "authortechnical.html#createauthorfile",
    "title": "3  Technical Guidelines",
    "section": "\n3.3 Author files",
    "text": "3.3 Author files\nCreate or update your author file.\n\n3.3.1 Why?\nThe rOpenSci website has a page listing all authors who have contributed to a blog post, tech note, presented in a Community Call, host a co-working session, delivered a talk about rOpenSci’s activities or contribute to some of our projects like the Champions Program. A click on your by-line in a post takes the reader to your author page that has links to your online home, possibly your social media or GitHub profile(s), and a list of all the content you’ve authored on our site. For staff and leadership team members, editors for software peer review, members of our Code of Conduct Committee, and participants of our Champions Program, their rOpenSci title is also listed on their author page.\n\n3.3.2 How?\nIf you don’t already have an author page, create a folder called yourfirstname-yourlastname in your local copy of roweb3/content/author/. You can have accents, middle initials, or hyphens appear in your name if you name your folder appropriately. That can be tricky so we have examples below.\nIn that folder, create a file called _index.md with information about your online presence. You can copy this template below (or get it via roblog after installing it via install.packages(\"roblog\", repos = \"https://dev.ropensci.org\") ).\n author-file-template.md \n\n---\nname: Author name\nlink: website URL or other online presence\nmastodon: Mastodon full URL to profile\ntwitter: Twitter username\ngithub: GitHub username\ngitlab: GitLab username\nkeybase: Keybase ID\norcid: ORCID ID\nimg: link to picture to be saved in themes/ropensci/static/img/community (if not provided, uses GitHub profile picture)\n---\n\nAt minimum, provide your name and a link or your Social Media, GitHub, or GitLab username. Add your usernames or ID’s without the “@” or the “https:…”. The link field can be your personal website URL, for example.\n\n3.3.3 Example\nThis author file, /author/maëlle-salmon/_index.md\n---\nname: Maëlle Salmon\nmastodon: https://mastodon.social/@maelle\nbio: rOpenSci Research Software Engineer, Associate editor of rOpenSci Software Peer Review\ngithub: maelle\ngitlab: maelle\nkeybase: maelle_salmon\norcid: 0000-0002-2815-0399\n---\n… generates Maëlle Salmon’s author page.\nFor an example of how to name the folder with an accent and initials, see this author file that generates Richèl J.C. Bilderbeek’s author page. The folder name must include accents, initials with periods, and hyphens for spaces, in order to link to their blog content.\nLook at other people’s folder names for examples.\nYour author page will show the picture you have on your GitHub profile.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#templates",
    "href": "authortechnical.html#templates",
    "title": "3  Technical Guidelines",
    "section": "\n3.4 Post template",
    "text": "3.4 Post template\nStart your post from a template. If you use RStudio, refer to the instructions to create your draft with blogdown’s New Post Addin. If not, refer to the instructions to create your draft manually.\n\n3.4.1 New Post Addin\nThe blogdown New Post RStudio addin creates the post draft in the correct location and fills the post YAML based on metadata you’ll have entered.1\n\nInstall whoami and blogdown (install.packages(c(\"whoami\", \"blogdown\"))) (blogdown version should be at least 1.6.0).\nInstall Hugo (to preview the post): blogdown::install_hugo(\"0.133.0\") (version recorded in netlify.toml of the roweb3 repository).\nRe-start R.\nIn RStudio, open the forked roweb3 project.\nCreate a new post by running Addins &gt; New Post or blogdown:::new_post_addin().\nLeave “Categories” blank (and ignore in the file created)\n\n\n\n\n\n\n\n\n\n\nEnter a title, no need to worry about title case at this stage.\nEnter your name if whoami wasn’t able to guess it.\nChoose the correct date.\nEnter a new slug if the default one is too long.\nChoose “blog” as a Subdirectory from the drop-down menu.\nChoose an Archetype, Rmd or qmd or md, from the drop-down menu.\nAlso choose the correct Format: .Rmd if Rmd, Markdown (.md) if md. Never choose .RMarkdown.\nIgnore Categories.\nSelect “tech notes” tag if this is a tech note\nSelect any other relevant tags and/or create new ones\nClick on “Done”, your post draft will have been created and opened.\n\n3.4.2 Manually\nCreate a folder YYYY-MM-DD-slug/ (e.g. 2020-01-20-rorcid/) under /content/blog/ Your post source and its images should live in /content/blog/YYYY-MM-DD-slug/.2\n\nR Markdown template is to be saved as /content/blog/YYYY-MM-DD-slug/index.Rmd. It will need to be knit (RStudio knit button, or blogdown::build_site(build_rmd = &lt;path_to_file&gt;)). Add both index.Rmd and index.mdto your PR.\nQuarto template is to be saved as /content/blog/YYYY-MM-DD-slug/index.qmd. It will need to be rendered. Add both index.qmd and index.mdto your PR.\nMarkdown template is to be saved as /content/blog/YYYY-MM-DD-slug/index.md.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#usetemplates",
    "href": "authortechnical.html#usetemplates",
    "title": "3  Technical Guidelines",
    "section": "\n3.5 Adding content",
    "text": "3.5 Adding content\n\n3.5.1 YAML\nThe YAML sets the metadata for a post. This is the YAML from our post template, with comments to explain some components.\n\nNote: The New Post Addin automatically creates a categories component, but you should ignore or remove this and use tags instead.\n\nslug: post-template\ntitle: Post Title in Title Case\npackage_version: 0.1.0\nauthor:\n- Author Name1\n- Author Name2\ndate: '2020-03-10'\ntags:\n- Software Peer Review\n- packages\n- R\n- community\ndescription: A very short summary of your post (~ 100 characters)\nsocialImg: blog/2019/06/04/post-template/name-of-image.png\nsocialAlt: Alternative description of the image\nsocial: A post about blabla by @username@server.extension!\neditor: ~\nIf you need to add an alert box at the beginning of the post, use the preface field with the Markdown syntax. See for instance this post with a preface about a series of post (source)\npreface: \"some alert\"\n\n3.5.1.1 Subject tags\nAdd tags to the YAML of your post to make it more findable. Browse our page that lists all tags in use and re-use an existing tag rather than creating a new one e.g. ‘packages’ exists, so use that, rather than ‘package’.\nFor a post about your peer-reviewed package, use ‘Software Peer Review’, ‘community’, ‘packages’, the package name, and any others you see fit.\n\n3.5.1.2 Social media metadata (optional)\nDelete description, socialImg and socialAlt YAML fields if you don’t use them.\n\n3.5.1.3 Default social media text (optional)\nProvide default text for social media post (Mastodon and LinkedIn) when a reader clicks the “Share on Mastodon” button by replacing the value of social: \"A post about blabla by @username@server.extension!\". Consider including your (and your coauthors) Mastodon handle(s) (@username@server.extension) in the post text to ensure you get notified when someone shares your post.\n\n3.5.2 Images - General\nImages can either be external or created in rmarkdown. Regardless of how images are included, they should all contain alt text and consider the following features.\nAlt text\nEvery image should be accompanied by alternative text to make it more accessible and provide a better user experience. The alternative text should convey the meaning or content that is displayed in the image. Refer to this tutorial for details on what should go in alternative text, and see the following sections for how to include alt text.\nIf you include a picture with text (like a comment on a post or a phrase on a wall), include the text you want to highlight from that image in the alt-text.\nImage features\n\nConsider transparent backgrounds as the blog background is not white (hex logos etc. will look better this way)\nKeep images &lt; 1 mb\n\nLarge images can be compressed/optimized with tools like\n\nOptiPNG (Local software, also integrates with rmarkdown)\n\nminimage (Local software)\n\nTinyPNG (Online tool)\n\n\n\n3.5.3 Images - External\n\nThis section refers to images that are not generated from R Markdown. If you want to generate images from R Markdown use our R Markdown template and see next subsection.\n\nFile location\nAll images go in the same folder as your post source (/content/blog/YYYY-MM-DD-slug/) (do not link to external services like imgur). To reference them in your post, use name-of-image.png.\nInsert an image\n\n\nInsert an image with either figure or imgtxt short codes\n\nNote the use of alt = to specify alt text\n\n{{&lt; figure src = \"image-name.png\" alt = \"informative description\" &gt;}}\nimgtxt:\n\n\n\n{{&lt; imgtxt src = \"image-name.png\" alt = \"informative description\"&gt;}} \nText to right \n{{&lt; /imgtxt &gt;}}\nImage placement\n\n\nBasic positioning with {{&lt; figure &gt;}} and class\n{{&lt; figure src = \"image-name.png\" alt = \"informative description\" class = \"center\" &gt;}}\n\n\npull-left - Left-align the picture and wrap text around it\n\ncenter - Center the picture (no text wrapping)\n\npull-right - Right-align the picture and wrap text around it\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecific text next to image with {{&lt; imgtxt &gt;}}\n{{&lt; imgtxt src = \"image-name.png\"&gt;}} Text to right {{&lt;/ imgtxt &gt;}} Text below\n\nOnly text between {{&lt; imgtxt &gt;}} and {{&lt;/ imgtxt &gt;}} is to the right of the figure\n\n\n\n\n\n\n\n\n\n\n\n\nFor images side-by-side, create a composite and insert as a single image\n\nConsider gimp for free and open source image manipulation software\nConsider the R package patchwork for combining R figures\n\n\n\nOther details\n\nControl image size with width{{&lt; figure src = \"image-name.png\" width = \"400\" alt = \"informative description\"&gt;}}\nMake the image a hyperlink with link{{&lt; figure src = \"image-name.png\" alt = \"informative description\" link = \"http://hyperlink\"&gt;}}\n\nImportant! In R Markdown (i.e. in *.Rmd files but NOT *.md files), these Hugo shortcodes need to be escaped:\n&lt;!--html_preserve--&gt;{{&lt; figure src=\\\"name-of-image.png\\\" width=\\\"400\\\" alt=\\\"informative description\\\"&gt;}}&lt;!--/html_preserve--&gt;\n\n3.5.4 Images - Rmd-created\nFile location\nWhen using our R Markdown template the knitr hook in the setup chunk actually creates the necessary Hugo shortcodes. Therefore you don’t need to worry about paths.\nImage details\nIn the chunk producing a figure, use the hugoopts chunk option to control the alt text and other elements. hugoopts is a named list that can have all elements described in the documentation of the Hugo figure shortcode except for title.\n```{r chunkname, hugoopts=list(alt=\"alternative text please make it informative\", caption=\"this is what this image shows, write it here or in the paragraph after the image as you prefer\", width=300)} \nplot(1:10)\n```\nThis chunk above produces a figure with “alternative text please make it informative” as alternative text, “title of the image” as title, “this is what this image shows, write it here or in the paragraph after the image as you prefer” as caption, and a width of 300 pixels.\n\n3.5.5 Citations and footnotes\nTo add citations, refer to them in the body of your post as footnotes:\nCitation of the primary literature[^1].\nCitation of an R package[^2].\nCitation of a website[^3].\nAnd list your sources at the bottom of your post:\n[^1]: Sciaini, M., Fritsch, M., Scherer, C., & Simpkins, C. E. (2018). NLMR and landscapetools: An integrated environment for simulating and modifying neutral landscape models in R. Methods in Ecology and Evolution, 9(11), 2240-2248. &lt;https://doi.org/10.1111/2041-210X.13076&gt;\n[^2]: Elin Waring, Michael Quinn, Amelia McNamara, Eduardo Arino de la Rubia, Hao Zhu and Shannon Ellis (2019). skimr: Compact and Flexible Summaries of Data. R package version 2.0.2. https://CRAN.R-project.org/package=skimr\n[^3]: Hugo static site generator. https://gohugo.io/\n\n3.5.5.1 Finding citations\nTo get the citation for an R package, run citation(\"packagename\").\nTo get the citation for an article, you can use the RStudio Addin for rcrossref, or get the citation from a paper’s DOI by running e.g.\nrcrossref::cr_cn(\"10.1111/2041-210X.13076\", format=\"text\", style=\"apa\")\n\n[1] \"Sciaini, M., Fritsch, M., Scherer, C., & Simpkins, C. E. (2018). NLMRandlandscapetools: An integrated environment for simulating and modifying neutral landscape models inR. Methods in Ecology and Evolution, 9(11), 2240–2248. doi:10.1111/2041-210x.13076\"\nTo get the citation for an article in Google Scholar, find the article, click the quote symbol (in search results under the article) to open the “Cite” window, and copy the APA style text.\n\n\n\n\n\n\n\n\n\n3.5.6 Referencing social media posts\nWe no longer recommend embedding social media posts directly, as posts can always be deleted and the context in the blog post is lost when that happens.\nInstead, we recommend using a block quote linking the post. Example, source.\n\n3.5.7 Block quotes\n\n3.5.7.1 Block quotes with no attribution\nE.g. if you want to highlight a sentence from the post itself.\nBlock quotes are paragraphs starting with &gt;.\nIf you want to have them right-align add {.blockquote .text-right} right after the paragraph e.g.\n&gt; blabla\nblabla\nblabla\n{.blockquote .text-right}\nIf you want to have them centered add {.blockquote .text-center} right after the paragraph e.g.\n&gt; blabla\nblabla\nblabla\n{.blockquote .text-center}\n\n3.5.7.2 Block quotes with attribution\nIf you want to add a block quote with an author name, use:\n{{&lt; quote footer=\"Author Name\"&gt;}}\nBlablablabla  \n{{&lt; /quote &gt;}}\nIf you want to add a block quote with an author name and a source, use:\n{{&lt; quote footer=\"Author Name\" cite=\"[good book](url)\"&gt;}}\nBlablablabla  \n{{&lt; /quote &gt;}}\nIf you want to center the block quote add the align variable:\n{{&lt; quote footer=\"Author Name\" cite=\"[good book](url)\" align=\"center\"&gt;}}\nBlablablabla  \n{{&lt; /quote &gt;}}\nIf you want to right-align the block quote add the align variable:\n{{&lt; quote footer=\"Author Name\" cite=\"[good book](url)\" align=\"right\"&gt;}}\nBlablablabla  \n{{&lt; /quote &gt;}}\nNote that this syntax also work for quotes without attribution!\n{{&lt; quote align=\"center\"&gt;}}\nBlablablabla  \n{{&lt; /quote &gt;}}\n\n3.5.8 Tables\nIf you want to use e.g. striped tables, add {.table .table-responsive .table-striped} right after the last line of the table.\nHeader   | Other Header | Another Header\n---------|----------------|-------------------\nValue 11 | Value 12       | Value 13\nValue 21 | Value 22       | Value 23\nValue 31 | Value 32       | Value 33\n{.table .table-responsive .table-striped}\n\n3.5.9 Examples\nComparing the raw Markdown to the live posts in these examples might be helpful.\n\nA blog post about a package that has passed software peer review. Compare raw markdown with the live post.\nA tech note. Compare raw markdown with the live tech note.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#multilingual-posts",
    "href": "authortechnical.html#multilingual-posts",
    "title": "3  Technical Guidelines",
    "section": "\n3.6 Multilingual posts",
    "text": "3.6 Multilingual posts\nPlease discuss your post’s language with blog editors!\n\nOur website’s default language is English so only posts in English are called index.md.\nFor translating a post, create a file in the same folder as the original post but called index.&lt;two-letter-language-code&gt;.md, for instance index.es.md. Translate tags, title, description too.\nFor a post in a single non-English language omit the index.md file and only use the index.XX.md file using the appropriate language code (e.g., index.es.md for a Spanish-only post).\nAdd an author file in content/author/author-name/_index.&lt;two-letter-language-code&gt;.md even if it only duplicates content/author/author-name/_index.md.\nIf you are writing the first blog entry for a particular language (yay!), please ask blog editors to notify the website team so we can add translation for the blog infrastructure (such as “Share this page” and similar phrases).\nFeel free to checkout the rOpenSci translation guide for how we are translating rOpenSci material in general.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#styleguide",
    "href": "authortechnical.html#styleguide",
    "title": "3  Technical Guidelines",
    "section": "\n3.7 Style Guide",
    "text": "3.7 Style Guide\n\n\nFormatting\n\nFor package names, functions, and code, follow the tidyverse style guidance.\nFormat package names as regular text (no quotes).\nDo not use markdown in titles (but you can use them in headings).\nUse ## and ### to format headings in your post, i.e. section titles as ## (h2) and subsections as ### (h3), #### (h4).\nAdd new line at end of each sentence (makes diffs easier to interpret and easier for editor to suggest specific changes).\n‘rOpenSci’ not ‘ROpenSci’\n\n\n\nLinks and images\n\nWhen adding rOpenSci links to your post, use relative instead of absolute URLs e.g. /blog/ instead of https://ropensci.org/blog/.\nWhen linking to rOpenSci packages use their docs.ropensci.org URL, e.g. https://docs.ropensci.org/target/.\nUse Hugo shortcodes (not html) to add images, gists etc.\nIn R Markdown wrap Hugo shortcodes between html preserve tags as shown in the template.\nInstead of using html widgets (DT, leaflet, etc.), include a screenshot and use the link option of the Hugo figure shortcode to direct readers to an online version of the widget.\nUse informative alternative text for all images.\n\n\n\nLanguage\n\n\nAll languages Avoid Latin phrases such as “e.g.” (for instance) or “i.e.” (that is to say). Use phrases in the language of your post instead.\n\nEnglish - Use title case for the title of your post; use sentence case for headings inside the post.\n\nNon-English - If using English words, use italics for the word in English and translate directly in parentheses the first time it is mentioned",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#presubchecks",
    "href": "authortechnical.html#presubchecks",
    "title": "3  Technical Guidelines",
    "section": "\n3.8 Pre-submission checks",
    "text": "3.8 Pre-submission checks\n\n3.8.1 Knit post\nIf using the R Markdown template, knitting index.Rmd (RStudio knit button, or blogdown::build_site(build_rmd = &lt;path_to_file&gt;)) will generate index.md. Commit both index.Rmd and index.md.\n\n3.8.2 Check with roblog\n\nYou can use functions in the roblog package to do some automated checks on your post.\n\n\nro_lint_md() to check and enforce use of complete alternative descriptions for image, of relative links to rOpenSci website, of Hugo shortcodes.\n\nro_check_urls() to check for URLs that might be broken\n\n3.8.3 Author Checklist\nPick the appropriate checklist for your post and ensure you checked everything off. Notice the copy-paste button at the top-right corner of the list.\n\n3.8.3.1 Posts on peer-reviewed packages\n\n\n* [ ] I have read the Content Guidelines.\n* [ ] I have read the Technical Guidelines.\n* [ ] I used or followed the R Markdown or Markdown template.\n* [ ] I have followed the Style Guide.\n* [ ] I created or updated my author metadata with correct folder name.\n* [ ] I have added relevant tags after browsing existing tags (including \"community\" tag).\n* [ ] I have added the \"tech notes\" tag if this is a technote.\n* [ ] I ran `roblog::ro_lint_md()` on index.md (optional).\n* [ ] I ran `roblog::ro_check_urls()` on index.md (optional).\n* [ ] I ran a spell-check on index.md.\n* [ ] I have added the tags - Software Peer Review, my-packagename.\n* [ ] I have added the package-version YAML tag.\n* [ ] I have added acknowledgement of the reviewers' work (with links to reviewers).\n* [ ] I have added a link to the software peer review thread.\n\n\n\n3.8.3.2 Other posts\n\n\n* [ ] I have read the Content Guidelines.\n* [ ] I have read the Technical Guidelines.\n* [ ] I used or followed the R Markdown or Markdown template.\n* [ ] I have followed the Style Guide.\n* [ ] I created or updated my author metadata with correct folder name.\n* [ ] I have added relevant tags after browsing existing tags (including \"community\" tag).\n* [ ] I have added the \"tech notes\" tag if this is a technote.\n* [ ] I ran `roblog::ro_lint_md()` on index.md (optional).\n* [ ] I ran `roblog::ro_check_urls()` on index.md (optional).\n* [ ] I ran a spell-check on index.md.\n\n\n\n3.8.4 Local preview\nIf you wish to preview your post locally, as it will appear in our site, you must install Hugo. To install, refer to Hugo docs or run blogdown::install_hugo() using the version recorded in netlify.toml.\nNote: You can also preview your blog post online through the pull request before the final submission.\nThen run hugo serve or blogdown::serve_site() in the repo directory to start a local server on http://localhost:1313 (or another one indicated by blogdown).\nNote: If you are used to using hugodown you can use it instead to serve the website.\nThe version of Hugo used by the rOpenSci web server is defined in netlify.toml.\nWhen this preview looks good to you, you should submit your post as a pull request.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#submitpost",
    "href": "authortechnical.html#submitpost",
    "title": "3  Technical Guidelines",
    "section": "\n3.9 Submit draft post",
    "text": "3.9 Submit draft post\n\n3.9.1 Create draft pull request\n\nOpen a draft pull request (PR) from your fork (using the web interface, see step 8 for creating a draft), or usethis::pr_push() that will save you some work and that will in the end open the same web interface where you can choose Draft PR in the last step)\nIf you opened a PR instead of a draft PR, you can convert it to a draft by clicking on “Still in progress? Convert to draft” on the right panel under “Reviewers”.\n\n3.9.2 Add checklist\nIn the first comment of your pull request submitting a post, please copy-paste the checklist corresponding to your post and check off the items.\n\n3.9.3 Preview online\nFrom the PR, Netlify will start building the new version of the site within seconds and you can preview your changes to make sure everything looks as intended. Otherwise push additional fixes till things look right.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.9.4 Submit post\n\nMark the draft PR as ready for review at least one week prior to the planned publication date. When you get approval for a post idea you’ll be told who to ping as your reviewer.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authortechnical.html#footnotes",
    "href": "authortechnical.html#footnotes",
    "title": "3  Technical Guidelines",
    "section": "",
    "text": "If you don’t use RStudio you can still use the addin, but the new post will be opened in the editor returned by getOption(\"editor\"), that you might need to configure.↩︎\nIn Hugo speak, we’d say your post is a leaf bundle.↩︎",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Technical Guidelines</span>"
    ]
  },
  {
    "objectID": "authorreview.html",
    "href": "authorreview.html",
    "title": "4  Respond to Feedback",
    "section": "",
    "text": "This chapter outlines how an author of a blog post or tech note can find and respond to comments from an editor in the GitHub pull request review interface.\n\n\n\nOnce you have submitted your blog post or tech note, an editor will review your post providing comments on both content (is the narrative clear?) and technical (does it follow our Style Guide?) aspects.\nBrowse Chapter 5.1 Review a post to see how editors use the GitHub web interface to suggest edits, make comments, and approve or request changes to your pull request.\nTo respond to an editor’s review:\n\nRespond to every inline comment with a thumbs up or thumbs down emoji so the editor knows you have seen it.\nIt’s ok to explain why you disagree with some comments.\n\nResolve conversation for items you have addressed.\nTag the editor when you have finished addressing their comments.\n\nThe editor will confirm when your post is ready for publication.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Respond to Feedback</span>"
    ]
  },
  {
    "objectID": "authorpromote.html",
    "href": "authorpromote.html",
    "title": "5  Publication and Promotion",
    "section": "",
    "text": "This chapter provides some motivation for doing the extra work to contribute a post by outlining what rOpenSci does to promote it.\n\n\n\nWe hope that by doing the extra work of publishing a blog post or tech note that you will benefit by getting more eyes on your work. Blog posts and tech notes published in 2019 on rOpenSci website got on average 426 page views in the 31 days following their publication (median of 298.5, minimum of 96, maximum of 1687). Blog posts then live a life of their own: some people will still access them, e.g. finding them via a Search Engine or rOpenSci website tag pages.\nWhen your post is published, here is what we do to promote it.\n\nPost from rOpenSci Mastodon account and LinkedIn page with a link to your post, tagging post author(s) and package reviewers with a link to the software peer review thread where relevant. rOpenSci has more than 2,000 followers on Mastodon and more than 1,000 on LinkedIn.\nList your post, with author names, in our monthly newsletter.\n\nOur newsletter is opened by more than 1,000 readers each month and additional readers through RSS & JSON feeds.\n\nOur blog and tech notes are syndicated to and shared by R-bloggers and R Weekly. R-Bloggers cross-posts posts so it adds page views we can’t measure, whereas R Weekly drives traffic to blog posts on our website. R-Bloggers had nearly 80,000 Twitter followers in February 2020. The R Weekly Highlights podcast also regularly features some of our posts.\nOur blog is also syndicated to Rogue Scholar, an archive for scholarly blog posts that provide full-text search, long-term archiving, DOIs and metadata. Your blog post will be assigned a DOI and archived in the Internet Archive. If you have an integration with your ORCID, your blog post will be added to your ORCID profile when we publish.\n\nThis is Yani’s ORCID profile as an example; if you scroll down until the “Works” session, all the rOpenSci blog posts are listed there.\nYou are welcome to cross-post to your own website as long as you also link to the rOpenSci website version. Example.",
    "crumbs": [
      "Author Guide",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Publication and Promotion</span>"
    ]
  },
  {
    "objectID": "editor.html",
    "href": "editor.html",
    "title": "6  Review, Publish, Promote",
    "section": "",
    "text": "6.1 Review a post\nThis section explains how to review a blog post or tech note. The editor for a post is typically the Community Manager or their intern.\nA post is submitted as a pull request on GitHub. We use the well documented GitHub web interface to suggest edits, make comments, and ultimately merge the pull request to publish the post. There’s no better resource than that for screenshots and guidance on reviewing pull requests and for links to share with an author when coaching them on how to respond to your review.\nThese are particularly helpful:",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Review, Publish, Promote</span>"
    ]
  },
  {
    "objectID": "editor.html#review",
    "href": "editor.html#review",
    "title": "6  Review, Publish, Promote",
    "section": "",
    "text": "About pull request reviews\nReviewing proposed changes in a pull request\nIncorporating feedback in your pull request\n\n\n6.1.1 Review\nRead the post preview to get a feel for it. On the first read, you might make a few pen & paper notes on what to pay attention to on deeper review. This is a good time to note some positive feedback, based on a first impression. There is always something great in a post to highlight in your review. Be specific. If the post or something in it excites you, don’t hesitate to say that. How else will the author know and be inspired?!\nTo start your review of the pull request, copy and paste either the editor checklist for a post about a peer-reviewed package, or the editor checklist for any other post, into the box that appears when you click the green Review changes button.\nClick on the Files changed tab in the pull request to view the .Rmd or .md file for the post. Complete the checklist and comment as needed inline in the .Rmd or .md file. You must comment in the .Rmd if one was submitted.\nWhen adding your first comment, choose Start a review (not Add a single comment), so the author gets a single notification for the review when it is complete.\nWhere changes are “obvious” such as fixing grammar or a typo, use GitHub “commit suggestion” &lt;cmd-g&gt;/&lt;ctrl-g&gt; so the author can commit your change directly. Comment to explain the change if needed, for instance if the diff displayed by GitHub does not highlight which word(s) were edited.\nWhile our Style Guide recommends that authors add line breaks at the end of every sentence, we do not ask them to add these in their draft after the fact.\nTo download a pull request locally so that you can experiment with it, run usethis::pr_fetch(&lt;pr_number&gt;). Even if an author gives edit permission to the repo maintainer, the editor does not usually make edits directly on the post. Rare exceptions can be made at the editor’s discretion.\nTo ask the author to address a comment, provide a link to the appropriate section of this book to guide them.\nAfter all inline commenting and the checklist is done, add any further notes, starting with a positive comment and your overall impression, to the Review changes box. Tell the author if you have updated their author metadata (author file) e.g. by fixing the folder name, or adding a social media handle. This helps draw their attention to this nice feature.\nWe don’t (yet?) have templated editor response text, but here are helpful things to include:\n\nI have made ~n (number of) comments. Look for hidden conversations when there are many comments.\nAsk for thumbs up or thumbs down on every editor comment so we know you have seen it.\nIt’s ok to disagree with some comments.\n\nResolve conversation for items you have addressed.\nTag editor when you have finished addressing their comments.\n\nWhen your review is complete, click Comment, Approve, or Request changes, at your discretion. This will trigger a notification to the author.\n\n6.1.2 Editor checklist - Posts on peer-reviewed packages\n\n\n* [ ] post follows Content Guidelines\n* [ ] post follows Style Guide\n* [ ] title is in Title Case\n* [ ] publication date is ok\n* [ ] slug is ok\n* [ ] alternative text of images is informative\n* [ ] author metadata is provided with correct folder name for each language\n* [ ] html not included in pull request of Rmd post\n* [ ] I ran `roblog::ro_lint_md()` on index.md\n* [ ] I ran `roblog::ro_check_urls()` on index.md\n* [ ] I ran a spell-check on index.md\n* [ ] YAML subject tags are ok (\"tech notes\" for tech notes; \"community\" for non-staff non-editor)\n* [ ] YAML field 'editor' is filled with your name\n* [ ] YAML field 'translator' is filled as needed\n* [ ] YAML field 'preface' is present if necessary\n* [ ] YAML field 'params.doi' is filled with a new DOI\n* [ ] YAML package-version included\n* [ ] YAML subject tags - software peer review, packagename\n* [ ] acknowledges and links to reviewers\n* [ ] links to peer review thread\n\n\n\n6.1.3 Editor checklist - Other posts\n\n\n* [ ] post follows Content Guidelines\n* [ ] post follows Style Guide\n* [ ] title is in Title Case\n* [ ] publication date is ok\n* [ ] slug is ok\n* [ ] alternative text of images is informative\n* [ ] author metadata is provided with correct folder name for each language\n* [ ] html not included in pull request of Rmd post\n* [ ] I ran `roblog::ro_lint_md()` on index.md\n* [ ] I ran `roblog::ro_check_urls()` on index.md\n* [ ] I ran a spell-check on index.md\n* [ ] YAML subject tags are ok (\"tech notes\" for tech notes; \"community\" for non-staff non-editor)\n* [ ] YAML field 'editor' is filled with your name\n* [ ] YAML field 'translator' is filled as needed\n* [ ] YAML field 'preface' is present if necessary\n* [ ] YAML field 'params.doi' is filled with a new DOI\n\n\n\n6.1.4 Check cross-posting metadata\nIf the post is cross-posted on other website(s), indicate it like so in the YAML metadata of the post:\ncrossposts:\n- name: website1 name\n  url: url to post on website1\n- name: website2 name\n  url: url to post on website2\nThis is to ensure the cross-post alert appears (example as well as to make the cross-post metadata visible to the JSON feed that Rogue Scholar uses.\n\n6.1.5 Check social media metadata\nThe social media metadata in a post’s YAML helps it “look good” when an account like R Weekly Live or other readers link to the post in a post, separate from the post we send.\nTherefore it is important to check the social media metadata if it is present.\nPerfecting metadata for social media is optional for authors, so decide how critical any changes are before requesting them in your review.\n\n6.1.6 Check DOI metadata\nBefore merging the post needs this field:\nparams:\n  doi: &lt;doi-string&gt;\nwhere &lt;doi-string&gt; is a new unique DOI string generated by running [commonmetar::commonmeta_doi()]. This does not register the DOI: registration will automatically happen after publication, thanks to Rogue Scholar’s infrastructure.",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Review, Publish, Promote</span>"
    ]
  },
  {
    "objectID": "editor.html#publish",
    "href": "editor.html#publish",
    "title": "6  Review, Publish, Promote",
    "section": "\n6.2 Publish a post",
    "text": "6.2 Publish a post\nPublish a post by merging its pull request. For a post dated e.g. 2020-02-28, you can merge it any time after ~5pm Pacific on 2020-02-27 i.e. when it’s Feb 28th somewhere in the world. When possible, it’s nice to have a post published by morning in the timezone of the main post author.\nA “topic” linked to the blog post will automatically be created in the discussion forum blogs category for both blog posts and tech notes. This facilitates commenting on posts. Comments will appear both below the post and in the discussion forum.\nNote about older posts: Very old posts from (before March 2017) have no comments at all; these posts have no topicid field in their YAML header. Newer posts (March 2017 onward) have a yaml field topicid and a number in it that links to a topic that we manually created in the forum. Posts newer than March 9, 2020 won’t have a topicid field in their YAML header as a forum topic is automatically created.",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Review, Publish, Promote</span>"
    ]
  },
  {
    "objectID": "editor.html#socialpromo",
    "href": "editor.html#socialpromo",
    "title": "6  Review, Publish, Promote",
    "section": "\n6.3 Promote a post on social media",
    "text": "6.3 Promote a post on social media\n\n6.3.1 Workflow\nPost from rOpenSci Mastodon account and LinkedIn Page.\nWe post at different time zones using our own system to schedule all social media post to Mastodon and LinkedIn.\nIt’s best to draft social media post in advance (e.g. while reviewing the post) and have a feature image(s) and alternative text for the image ready to use.\nFor community posts, draft social media text are posted in the comments of the pull request so the author can comment.\nIf the post is multilingual, we post in social media in all languages the post is available in. We use the same message translated into all languages.\n\n6.3.2 Content\nThe first post of a thread or only post must include\n\nthe post title,\na link to the post,\ntag the author’s account, or their IRL name\nthe hashtag #RStats and\nthe tag @rstats@a.gup.pe group.\n\nAny post must provide an alternative description of any included image.\nA further post can include a link to the software peer review thread.\nAny post can include\n\nadditional hashtags,\nadditional account names,\n\nwith the caveats of the next subsections.\n\n6.3.3 Tagging accounts\nTag the account(s) of all post authors and package authors and reviewers.\nIf not already included in their author metadata, you can search for their account but only tag them if\n\nit is active,\nit is not anonymous or private,\nit is at least partly used professionally by the owner.\n\nWhen in doubt, use the person’s name, or time permitting, contact the person whose account you’d like to tag.\nFor a package wrapping a service present on the social media you can tag that account (e.g. for a Mastodon post about rredlist that accesses IUCN Red List you might tag IUCN Mastodon account).\nWhen tagging accounts include them in a sentence e.g. “Thanks to @account1”/ “As told by @account2”. We do not use tagging in posts to ask for attention (i.e. no account names used like hashtags at the bottom of a post) because it could be viewed as spamming mentioned accounts, and because it creates visual clutter in the post.\n\n6.3.4 Using hashtags\nHashtags are very relevant in Mastodon and LinkedIn. Because there is not algorithm promoting a post based on likes or boosts, hashtags are the main way to get a post seen by people who are not already following the account. People follow hashtag on both platforms.\n\n6.3.4.1 Selecting relevant hashtags\nFor a post about a post related to a package or any R thing, use the #rStats hashtag. If the post is in another language than English, add the #rStats + language two letters, for example for Spanish is #rStatsES\nFor a post about a package, make the package name a hashtag. You can also add the package category, as we use it for social media campaigns. For example, for a post about the rredlist package, you could use #rredlist and #biodiversity. Use CamelCase for hashtags, as it improves accessibility by making them more accessible for screen reader users.\nCheck the last post using any hashtag except the #rStats hashtag to see whether it is used as you expect. E.g. using httr wouldn’t be a good idea. It is a package name but on social media it is the hashtag of a team with a name controversy.\n\n6.3.4.2 Adding hashtags\nDo not use too many hashtags in any post so as not to make the account look like a spam account / greedy for attention.\nPost hashtags at the bottom of each post, to make the rest of the content of the post easier to read.\nCapitalize letters of each word for hashtags including several words i.e. use lower or upper camelCase (e.g. #RLadies not #rladies).\nWhen posting a thread, use each hashtag only once so as not to pollute the timeline of that hashtag.\n\n6.3.5 Using emojis\nIn posts, emojis are optional. When using emojis, do not use too many of them.\n\n6.3.6 Using gifs\nIn posts, gifs are optional.\n\nOne can include a gif that was created for the post (e.g. an animated plot).\nBut generally not a Giphy gif since it might be interpreted differently by people who know more/less context about the gif in question (e.g. a TV show).\nWhen using a gif we should add its description by typing [Gif alt: descriptive phrase] at the bottom of the post.\n\n6.3.7 Example 2-post thread:\n[blog] “rmangal: making ecological networks easily accessible” \n\nNew post by @KCazelles & @SVissault in our Software Peer Review series \n\n🔗 https://ropensci.org/blog/2019/10/21/rmangal/\n\n1/2 \n#rStats #rmangal #SoftwarePeerReview\nShoutouts 🙏 in the post to reviewers Anna Willoughby & @thomasp85, rmangal contributors https://docs.ropensci.org/rmangal/authors.html, & all ecologists who have spent countless hours collecting data\n\n🔎Read the rmangal open software peer review thread: https://github.com/ropensci/software-review/issues/332\n\n2/2",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Review, Publish, Promote</span>"
    ]
  },
  {
    "objectID": "editor-meta.html",
    "href": "editor-meta.html",
    "title": "7  Editorial Governance",
    "section": "",
    "text": "7.1 GitHub team\nrOpenSci blog editors are the member of the @ropensci/blog-editors team.\nFor adding a new blog editor, the team maintainer or any ropensci admin\nThe blog editors can filter their notifications, e.g. using the reason:team-mention filter.\nThe blog editors don’t necessarily have write access to the blog-guidance repo but are encouraged to make PRs.",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Editorial Governance</span>"
    ]
  },
  {
    "objectID": "editor-meta.html#github-team",
    "href": "editor-meta.html#github-team",
    "title": "7  Editorial Governance",
    "section": "",
    "text": "Blog editors can be tagged in any ropensci repo, in particular roweb3, by writing @ropensci/blog-editors (e.g. :wave: @ropensci/blog-editors, I have trouble adding citations in my post!).\nBlog editors have write access to the roweb3 repo.\n\n\n\nensures the user has enabled 2FA,\nadds them to the team as Member (the default role).",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Editorial Governance</span>"
    ]
  },
  {
    "objectID": "editor-meta.html#posts-authored-by-staff",
    "href": "editor-meta.html#posts-authored-by-staff",
    "title": "7  Editorial Governance",
    "section": "\n7.2 Posts authored by staff",
    "text": "7.2 Posts authored by staff\n\nStaff members can bypass review for tech notes but they can choose to request a review by blog editors.\nStaff members’ blog posts should be scheduled together with the Community Manager.\nStaff members are responsible for promoting their own posts from their personal account on Mastodon and/or LinkedIn tagging rOpenSci’s accounts.",
    "crumbs": [
      "Editor Guide",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Editorial Governance</span>"
    ]
  },
  {
    "objectID": "templatemd.html",
    "href": "templatemd.html",
    "title": "8  Template - Post (md)",
    "section": "",
    "text": "Use of this template is described in Start the post from a template and Walkthrough with code snippets.\nMarkdown template to be saved as /content/blog/YYYY-MM-DD-slug/index.md\nNotice the copy-paste button at the top-right corner of the template.\n---\nslug: \"post-template\"\ntitle: Post Title in Title Case\n# Delete the package_version line below if your post is not about a package\npackage_version: 0.1.0\nauthor:\n  - Author Name1\n  - Author Name2\n# Set the date below to the publication date of your post\ndate: 2020-03-10\n# Minimal tags for a post about a community-contributed package \n# that has passed software peer review are listed below\n# Consult the Technical Guidelines for information on choosing tags\ntags:\n  - Software Peer Review\n  - packages\n  - R\n  - community\n# The summary below will be used by e.g. Mastodon preview cards\ndescription: \"A very short summary of your post (~ 100 characters)\"\n# If you have no preferred image for Mastodon preview cards,\n# delete the socialImg and socialAlt lines below \n# - Note \"/\" between year/month/day\nsocialImg: blog/2019/06/04/post-template/name-of-image.png\nsocialAlt: \"Alternative description of the image\"\n# the text below is for populating the \"share on Mastodon\" button\n# if deleted, the title of the post will be used\nsocial: \"A post about blabla by @username@server.extension!\"\n# this field is for the storing the name(s) of the editor(s) of your post\n# you can leave it empty until you know who'll review your PR\neditor:\n---\n\nThis is the Markdown (.md) template for a blog post or tech note. \nTo generate your post with R Markdown (.Rmd), use that template instead.\n\nThroughout this template, including the YAML, \nyou should change \"post-template\" to the slug of your post, \nand \"2019-06-04\" to your publication date.\n\nSave this file under /content/blog/YYYY-MM-DD-slug/index.md in the local copy of your roweb3 fork.\n\n## Section heading in sentence case\n\nCitation of the primary literature[^1]. \n\nCitation of a website[^2]. \n\nCitation of an R package[^3].\n\n### Subsection heading\n\nWe recommend the use of [Hugo shortcodes](https://gohugo.io/content-management/shortcodes/) to include images,, videos, gists, etc.\n\n**Add an image** by using a Hugo shortcode. The image is saved under `/content/blog/YYYY-MM-DD-slug/name-of-image.png`.\n\n{{&lt; figure src = \"name-of-image.png\" width = \"400\" alt = \"this is the alternative text\" &gt;}}\n\nConsult the Technical Guidelines for tips on changing image size, alignment, and for advice on alternative text.\n\n**Add citation or footnote** text by using the format below \n\n[^1]: Sciaini, M., Fritsch, M., Scherer, C., & Simpkins, C. E. (2018). NLMR and landscapetools: An integrated environment for simulating and modifying neutral landscape models in R. Methods in Ecology and Evolution, 9(11), 2240-2248. &lt;https://doi.org/10.1111/2041-210X.13076&gt;\n[^2]: Elin Waring, Michael Quinn, Amelia McNamara, Eduardo Arino de la Rubia, Hao Zhu and Shannon Ellis (2019). skimr: Compact and Flexible Summaries of Data. R package version 1.0.7. https://CRAN.R-project.org/package=skimr\n[^3]: Hugo static site generator. https://gohugo.io/",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Template - Post (md)</span>"
    ]
  },
  {
    "objectID": "templatermd.html",
    "href": "templatermd.html",
    "title": "9  Template - Post (Rmd)",
    "section": "",
    "text": "Use of this template is described in Start the post from a template and Walkthrough with code snippets.\nR Markdown template to be saved as /content/blog/YYYY-MM-DD-slug/index.Rmd\nAvailable on GitHub (not displayed for copy-paste because of “html_preserve” tags)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Template - Post (Rmd)</span>"
    ]
  },
  {
    "objectID": "authortemplate.html",
    "href": "authortemplate.html",
    "title": "10  Template - Author file",
    "section": "",
    "text": "Use of this template is described in Create or update your author file.\nAuthor file template to be saved as /content/authors/yourfirstname-yourlastname/_index.md as described in Technical Guidelines.\nNotice the copy-paste button at the top-right corner of the template.\n---\nname: Author name\nlink: website URL or other online presence\nmastodon: Mastodon full URL to profile\ntwitter: Twitter username\ngithub: GitHub username\ngitlab: GitLab username\nkeybase: Keybase ID\norcid: ORCID ID\nimg: link to picture to be saved in themes/ropensci/static/img/community (if not provided, uses GitHub profile picture)\n---",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Template - Author file</span>"
    ]
  },
  {
    "objectID": "authorchecklistpeer.html",
    "href": "authorchecklistpeer.html",
    "title": "11  Author Checklist - Posts on peer-reviewed packages",
    "section": "",
    "text": "Use of this template is described in Pre-submission checks.\nCopy this checklist into the first comment on your pull request. Notice the copy-paste button at the top-right corner of the template.\n\n\n* [ ] I have read the Content Guidelines.\n* [ ] I have read the Technical Guidelines.\n* [ ] I used or followed the R Markdown or Markdown template.\n* [ ] I have followed the Style Guide.\n* [ ] I created or updated my author metadata with correct folder name.\n* [ ] I have added relevant tags after browsing existing tags (including \"community\" tag).\n* [ ] I have added the \"tech notes\" tag if this is a technote.\n* [ ] I ran `roblog::ro_lint_md()` on index.md (optional).\n* [ ] I ran `roblog::ro_check_urls()` on index.md (optional).\n* [ ] I ran a spell-check on index.md.\n* [ ] I have added the tags - Software Peer Review, my-packagename.\n* [ ] I have added the package-version YAML tag.\n* [ ] I have added acknowledgement of the reviewers' work (with links to reviewers).\n* [ ] I have added a link to the software peer review thread.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Author Checklist - Posts on peer-reviewed packages</span>"
    ]
  },
  {
    "objectID": "authorchecklistany.html",
    "href": "authorchecklistany.html",
    "title": "12  Author Checklist - Other posts",
    "section": "",
    "text": "Use of this template is described in Pre-submission checks.\nCopy this checklist into the first comment on your pull request. Notice the copy-paste button at the top-right corner of the template.\n\n\n* [ ] I have read the Content Guidelines.\n* [ ] I have read the Technical Guidelines.\n* [ ] I used or followed the R Markdown or Markdown template.\n* [ ] I have followed the Style Guide.\n* [ ] I created or updated my author metadata with correct folder name.\n* [ ] I have added relevant tags after browsing existing tags (including \"community\" tag).\n* [ ] I have added the \"tech notes\" tag if this is a technote.\n* [ ] I ran `roblog::ro_lint_md()` on index.md (optional).\n* [ ] I ran `roblog::ro_check_urls()` on index.md (optional).\n* [ ] I ran a spell-check on index.md.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Author Checklist - Other posts</span>"
    ]
  },
  {
    "objectID": "editorchecklistpeer.html",
    "href": "editorchecklistpeer.html",
    "title": "13  Editor Checklist - Posts on peer-reviewed packages",
    "section": "",
    "text": "Use of this template is described in Review a Post.\nCopy this checklist to your GitHub review summary. Notice the copy-paste button at the top-right corner of the template.\n\n\n* [ ] post follows Content Guidelines\n* [ ] post follows Style Guide\n* [ ] title is in Title Case\n* [ ] publication date is ok\n* [ ] slug is ok\n* [ ] alternative text of images is informative\n* [ ] author metadata is provided with correct folder name for each language\n* [ ] html not included in pull request of Rmd post\n* [ ] I ran `roblog::ro_lint_md()` on index.md\n* [ ] I ran `roblog::ro_check_urls()` on index.md\n* [ ] I ran a spell-check on index.md\n* [ ] YAML subject tags are ok (\"tech notes\" for tech notes; \"community\" for non-staff non-editor)\n* [ ] YAML field 'editor' is filled with your name\n* [ ] YAML field 'translator' is filled as needed\n* [ ] YAML field 'preface' is present if necessary\n* [ ] YAML field 'params.doi' is filled with a new DOI\n* [ ] YAML package-version included\n* [ ] YAML subject tags - software peer review, packagename\n* [ ] acknowledges and links to reviewers\n* [ ] links to peer review thread",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Editor Checklist - Posts on peer-reviewed packages</span>"
    ]
  },
  {
    "objectID": "editorchecklistany.html",
    "href": "editorchecklistany.html",
    "title": "14  Editor checklist - Other posts",
    "section": "",
    "text": "Use of this template is described in Review a Post.\nCopy this checklist to your GitHub review summary. Notice the copy-paste button at the top-right corner of the template.\n\n\n* [ ] post follows Content Guidelines\n* [ ] post follows Style Guide\n* [ ] title is in Title Case\n* [ ] publication date is ok\n* [ ] slug is ok\n* [ ] alternative text of images is informative\n* [ ] author metadata is provided with correct folder name for each language\n* [ ] html not included in pull request of Rmd post\n* [ ] I ran `roblog::ro_lint_md()` on index.md\n* [ ] I ran `roblog::ro_check_urls()` on index.md\n* [ ] I ran a spell-check on index.md\n* [ ] YAML subject tags are ok (\"tech notes\" for tech notes; \"community\" for non-staff non-editor)\n* [ ] YAML field 'editor' is filled with your name\n* [ ] YAML field 'translator' is filled as needed\n* [ ] YAML field 'preface' is present if necessary\n* [ ] YAML field 'params.doi' is filled with a new DOI",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Editor checklist - Other posts</span>"
    ]
  }
]